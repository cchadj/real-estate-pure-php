<?php

namespace App\Model;

use App\Helper\DB;
use App\Traits\HasCity;
use PDO;

/**
 * @property Image[] $photos
 * @property Image|null $mainPhoto
 * @property string $publicationDate
 * @property string $priceDisplay
 * @property City|null $city
 * @property Area|null $area
 * @property PropertyType|null $propertyType
 * @method static Property|null Create(array $record, DB $db = null)
 * @method static Property|null Find(int $id, DB $db = null)
 * @method static Property[] All(DB $db = null)
 */
class Property extends Model
{
    use HasCity;

    public int $id;
    public string $name;
    public int $area_id;
    public int $city_id;
    private int $property_type_id;
    public float $price;
    public string $publication_date;
    public string $description;

    protected static function getTable(): string
    {
        return "properties"; // TODO: Change the autogenerated stub
    }

    protected static function fromRecord(array $record): Property{return new Property(...$record);}

    public function __construct(
        int $id,
        string $name,
        int $property_type_id,
        int $city_id,
        int $area_id,
        float $price,
        string $publication_date,
        ?string $description = "",
        ?string $created_at = "",
        ?string $updated_at = ""
    )
    {
        parent::__construct($created_at?? "", $updated_at?? "");
        $this->id = $id;
        $this->name = $name;
        $this->property_type_id = $property_type_id;
        $this->city_id = $city_id;
        $this->area_id = $area_id;
        $this->publication_date = $publication_date;
        $this->price = $price;
        $this->description = $description ?? "";
    }

    public function getPropertyType(DB $db = null): PropertyType | false {
        return PropertyType::Find($this->property_type_id, $db);
    }

    public function getArea(DB $db = null): Area | false {
        return Area::Find($this->area_id, $db);
    }

    /**
     * @return Image[]
     */
    public function getPhotos(DB $db = null): array {
        $db = $db ?? DB::connect();

        $stmt = $db->connection->prepare(
            "
            SELECT i.*
            FROM properties as p
            JOIN property_images as i ON p.id = i.property_id
            WHERE p.id = :property_id
            "
        );
        $stmt->bindValue(":property_id", $this->id, PDO::PARAM_INT);
        $stmt->execute();
        $imageRecords = $stmt->fetchAll();
        $propertyImages = array_map(fn($record): Image => Image::fromRecord($record), $imageRecords);
        return $propertyImages;
    }

    public function getMainPhoto(?DB $db = null ): Image | null
    {
        return Image::FindBy("property_id", $this->id, PDO::PARAM_INT, $db);
    }

    public function __get($name)
    {
        if ($name === "photos") {
            return $this->getPhotos();
        } elseif ($name === "publicationDate") {
            return \DateTime::createFromFormat("Y-m-d", $this->publication_date)->format("d/m/Y");
        }
        elseif ($name === "priceDisplay") {
            return "â‚¬" . number_format( $this->price, 2, '.', ' ' );
        }
        elseif ($name === "propertyType" ) {
            return $this->getPropertyType();
        }
        elseif ($name === "area") {
            return $this->getArea();
        }
        elseif ($name === "city") {
            return $this->getCity();
        }
        elseif ($name == "mainPhoto") {
            return $this->getMainPhoto();
        }
    }

    public function replace(array $record, ?DB $db = null): void
    {
        $db = $db ?? DB::connect();
        $query = "UPDATE 
            real_estate.properties SET 
            name=:name,
            property_type_id=:property_type_id,
            city_id=:city_id,
            area_id=:area_id,
            publication_date=:publication_date,
            price=:price,
            description=:description
            WHERE id=:id
        ";
        $stmt = $db->connection->prepare($query);
        $columnToType = static::getColumnToPdoParamType();
        unset($record["id"]);
        foreach ($record as $column => $value) {
            $stmt->bindValue(":$column", $value, $columnToType[$column]?? PDO::PARAM_STR);
        }
        $id = $this->id;
        $stmt->bindValue(":id", $id, PDO::PARAM_STR);
        $stmt->execute();
        // TODO: update model instance values
    }

    public function delete(): bool
    {
        $db = $db ?? DB::connect();
        $query = "DELETE FROM real_estate.properties WHERE id=:id";
        $stmt = $db->connection->prepare($query);
        $id = $this->id;
        $stmt->bindValue(":id", $id, PDO::PARAM_INT);
        return $stmt->execute();
    }
}